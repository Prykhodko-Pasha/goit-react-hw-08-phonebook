{"version":3,"sources":["components/Contacts/Contacts.module.css","components/Section/Section.module.css","components/Form/Form.module.css","components/Section/Section.js","redux/contacts/contacts-selectors.js","components/Form/Form.js","components/ContactsItem/ContactsItem.js","components/Contacts/Contacts.js","components/ContactsSearch/ContactsSearch.js","components/ContactsPage/ContactsPage.js"],"names":["module","exports","Section","title","children","className","s","section","section__title","getEntities","state","contacts","entities","getFilter","filter","getLoading","isLoading","getVisibleContacts","createSelector","items","item","name","toLowerCase","includes","Form","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","onChange","e","currentTarget","value","reset","form","onSubmit","preventDefault","length","console","log","operations","alert","type","placeholder","pattern","required","form__btn","ContactsItem","id","del__btn","onClick","Contacts","contacts__list","map","contacts__item","ContactsSearch","wrapper","event","actions","target","HomePage","useEffect","Loader","text"],"mappings":"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","file":"static/js/contacts-page.5bae2b46.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Contacts_wrapper__VrHoT\",\"contacts__list\":\"Contacts_contacts__list__1SBxt\",\"contacts__item\":\"Contacts_contacts__item__QwykZ\",\"text\":\"Contacts_text__3bm4x\",\"del__btn\":\"Contacts_del__btn__35HWS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__i86A0\",\"section__title\":\"Section_section__title__1bUz-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__1Hlrn\",\"form__btn\":\"Form_form__btn__16R2V\"};","import PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <div className={s.section}>\r\n      <h2 className={s.section__title}>{title}</h2>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.element.isRequired,\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getEntities = state => state.contacts.entities;\r\nexport const getFilter = state => state.contacts.filter;\r\nexport const getLoading = state => state.contacts.isLoading;\r\nexport const getVisibleContacts = createSelector(\r\n  [getEntities, getFilter],\r\n  (items, filter) =>\r\n    items.filter(item => item.name.toLowerCase().includes(filter)),\r\n);\r\n","import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport s from './Form.module.css';\r\nimport * as operations from '../../redux/contacts/contacts-operations';\r\nimport { getEntities } from '../../redux/contacts/contacts-selectors';\r\n\r\nexport default function Form() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const items = useSelector(getEntities);\r\n  const dispatch = useDispatch();\r\n\r\n  const onChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    const isContactExist = items.filter(\r\n      item => item.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n    if (isContactExist.length === 0) {\r\n      console.log(name, number);\r\n      dispatch(operations.addContact({ name, number }));\r\n    } else {\r\n      alert(`${name} is already in contacts.`);\r\n    }\r\n\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={onSubmit}>\r\n      <label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Name\"\r\n          value={name}\r\n          onChange={onChange}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          placeholder=\"Number\"\r\n          value={number}\r\n          onChange={onChange}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <button className={s.form__btn} type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","import { useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport s from '../Contacts/Contacts.module.css';\r\nimport * as operations from '../../redux/contacts/contacts-operations';\r\n\r\nexport default function ContactsItem({ id, name, number }) {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        {name}: {number}\r\n      </p>\r\n      <button\r\n        className={s.del__btn}\r\n        type=\"button\"\r\n        onClick={() => dispatch(operations.delContact(id))}\r\n      >\r\n        Delete\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nContactsItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n};\r\n","import { useSelector } from 'react-redux';\r\nimport s from './Contacts.module.css';\r\nimport ContactsItem from '../ContactsItem/ContactsItem';\r\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\r\n\r\nexport default function Contacts() {\r\n  const contacts = useSelector(getVisibleContacts);\r\n\r\n  return (\r\n    <ul className={s.contacts__list}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={s.contacts__item}>\r\n          <ContactsItem id={id} name={name} number={number} />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport s from '../Contacts/Contacts.module.css';\r\nimport * as actions from '../../redux/contacts/contacts-actions';\r\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\r\n\r\nexport default function ContactsSearch() {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <label className={s.wrapper}>\r\n      <input\r\n        placeholder=\"Find contacts by name\"\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={event =>\r\n          dispatch(actions.changeFilter(event.target.value.toLowerCase()))\r\n        }\r\n      />\r\n    </label>\r\n  );\r\n}\r\n","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport Section from '../Section/Section';\r\nimport Form from '../Form/Form';\r\nimport Contacts from '../Contacts/Contacts';\r\nimport ContactsSearch from '../ContactsSearch/ContactsSearch';\r\nimport Loader from '../Loader/Loader';\r\n\r\nimport s from '../Contacts/Contacts.module.css';\r\nimport {\r\n  getEntities,\r\n  getLoading,\r\n} from '../../redux/contacts/contacts-selectors';\r\nimport * as operations from '../../redux/contacts/contacts-operations';\r\n\r\nexport default function HomePage() {\r\n  const items = useSelector(getEntities);\r\n  const isLoading = useSelector(getLoading);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => dispatch(operations.fetchContacts()), [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      <Section title=\"Phonebook\">\r\n        <Form />\r\n      </Section>\r\n      <Section title=\"Contacts\">\r\n        {isLoading ? (\r\n          <Loader />\r\n        ) : items.length > 0 ? (\r\n          <>\r\n            {items.length > 1 && <ContactsSearch />}\r\n            <Contacts />\r\n          </>\r\n        ) : (\r\n          <div className={s.wrapper}>\r\n            <p className={s.text}>No contacts yet</p>\r\n          </div>\r\n        )}\r\n      </Section>\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}